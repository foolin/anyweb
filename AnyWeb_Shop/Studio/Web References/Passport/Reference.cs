//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.832
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.832 版自动生成。
// 
#pragma warning disable 1591

namespace Studio.Passport {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SSOSoap", Namespace="http://www.AnyP.cn/Services")]
    public partial class SSO : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback MakeTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback BrowseOnlinesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SSO() {
            this.Url = "http://public.anyp.cn/sso.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTicketCompletedEventHandler GetTicketCompleted;
        
        /// <remarks/>
        public event MakeTicketCompletedEventHandler MakeTicketCompleted;
        
        /// <remarks/>
        public event SignInCompletedEventHandler SignInCompleted;
        
        /// <remarks/>
        public event SignOutCompletedEventHandler SignOutCompleted;
        
        /// <remarks/>
        public event BrowseOnlinesCompletedEventHandler BrowseOnlinesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.AnyP.cn/Services/GetTicket", RequestNamespace="http://www.AnyP.cn/Services", ResponseNamespace="http://www.AnyP.cn/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTicket(string clientID, string sign) {
            object[] results = this.Invoke("GetTicket", new object[] {
                        clientID,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTicket(string clientID, string sign, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTicket", new object[] {
                        clientID,
                        sign}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetTicket(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketAsync(string clientID, string sign) {
            this.GetTicketAsync(clientID, sign, null);
        }
        
        /// <remarks/>
        public void GetTicketAsync(string clientID, string sign, object userState) {
            if ((this.GetTicketOperationCompleted == null)) {
                this.GetTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketOperationCompleted);
            }
            this.InvokeAsync("GetTicket", new object[] {
                        clientID,
                        sign}, this.GetTicketOperationCompleted, userState);
        }
        
        private void OnGetTicketOperationCompleted(object arg) {
            if ((this.GetTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketCompleted(this, new GetTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.AnyP.cn/Services/MakeTicket", RequestNamespace="http://www.AnyP.cn/Services", ResponseNamespace="http://www.AnyP.cn/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MakeTicket(string clientID, string sign, string fromIP, string fromSystemID, int userID) {
            this.Invoke("MakeTicket", new object[] {
                        clientID,
                        sign,
                        fromIP,
                        fromSystemID,
                        userID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMakeTicket(string clientID, string sign, string fromIP, string fromSystemID, int userID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MakeTicket", new object[] {
                        clientID,
                        sign,
                        fromIP,
                        fromSystemID,
                        userID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMakeTicket(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MakeTicketAsync(string clientID, string sign, string fromIP, string fromSystemID, int userID) {
            this.MakeTicketAsync(clientID, sign, fromIP, fromSystemID, userID, null);
        }
        
        /// <remarks/>
        public void MakeTicketAsync(string clientID, string sign, string fromIP, string fromSystemID, int userID, object userState) {
            if ((this.MakeTicketOperationCompleted == null)) {
                this.MakeTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMakeTicketOperationCompleted);
            }
            this.InvokeAsync("MakeTicket", new object[] {
                        clientID,
                        sign,
                        fromIP,
                        fromSystemID,
                        userID}, this.MakeTicketOperationCompleted, userState);
        }
        
        private void OnMakeTicketOperationCompleted(object arg) {
            if ((this.MakeTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MakeTicketCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.AnyP.cn/Services/SignIn", RequestNamespace="http://www.AnyP.cn/Services", ResponseNamespace="http://www.AnyP.cn/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignIn(string clientID, string sign, string fromIP, string fromSystemID, string identity, int signMethod, string password) {
            object[] results = this.Invoke("SignIn", new object[] {
                        clientID,
                        sign,
                        fromIP,
                        fromSystemID,
                        identity,
                        signMethod,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSignIn(string clientID, string sign, string fromIP, string fromSystemID, string identity, int signMethod, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SignIn", new object[] {
                        clientID,
                        sign,
                        fromIP,
                        fromSystemID,
                        identity,
                        signMethod,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSignIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignInAsync(string clientID, string sign, string fromIP, string fromSystemID, string identity, int signMethod, string password) {
            this.SignInAsync(clientID, sign, fromIP, fromSystemID, identity, signMethod, password, null);
        }
        
        /// <remarks/>
        public void SignInAsync(string clientID, string sign, string fromIP, string fromSystemID, string identity, int signMethod, string password, object userState) {
            if ((this.SignInOperationCompleted == null)) {
                this.SignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignInOperationCompleted);
            }
            this.InvokeAsync("SignIn", new object[] {
                        clientID,
                        sign,
                        fromIP,
                        fromSystemID,
                        identity,
                        signMethod,
                        password}, this.SignInOperationCompleted, userState);
        }
        
        private void OnSignInOperationCompleted(object arg) {
            if ((this.SignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignInCompleted(this, new SignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.AnyP.cn/Services/SignOut", RequestNamespace="http://www.AnyP.cn/Services", ResponseNamespace="http://www.AnyP.cn/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SignOut(string clientID, string sign) {
            this.Invoke("SignOut", new object[] {
                        clientID,
                        sign});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSignOut(string clientID, string sign, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SignOut", new object[] {
                        clientID,
                        sign}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSignOut(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SignOutAsync(string clientID, string sign) {
            this.SignOutAsync(clientID, sign, null);
        }
        
        /// <remarks/>
        public void SignOutAsync(string clientID, string sign, object userState) {
            if ((this.SignOutOperationCompleted == null)) {
                this.SignOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignOutOperationCompleted);
            }
            this.InvokeAsync("SignOut", new object[] {
                        clientID,
                        sign}, this.SignOutOperationCompleted, userState);
        }
        
        private void OnSignOutOperationCompleted(object arg) {
            if ((this.SignOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignOutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.AnyP.cn/Services/BrowseOnlines", RequestNamespace="http://www.AnyP.cn/Services", ResponseNamespace="http://www.AnyP.cn/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BrowseOnlines() {
            object[] results = this.Invoke("BrowseOnlines", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBrowseOnlines(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BrowseOnlines", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBrowseOnlines(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BrowseOnlinesAsync() {
            this.BrowseOnlinesAsync(null);
        }
        
        /// <remarks/>
        public void BrowseOnlinesAsync(object userState) {
            if ((this.BrowseOnlinesOperationCompleted == null)) {
                this.BrowseOnlinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrowseOnlinesOperationCompleted);
            }
            this.InvokeAsync("BrowseOnlines", new object[0], this.BrowseOnlinesOperationCompleted, userState);
        }
        
        private void OnBrowseOnlinesOperationCompleted(object arg) {
            if ((this.BrowseOnlinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrowseOnlinesCompleted(this, new BrowseOnlinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetTicketCompletedEventHandler(object sender, GetTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MakeTicketCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SignInCompletedEventHandler(object sender, SignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SignOutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void BrowseOnlinesCompletedEventHandler(object sender, BrowseOnlinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrowseOnlinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrowseOnlinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591